Next.js? 
- 프레임워크 // 개발자가 어떤 것을 제어할 수 있는 대상이 아니다.
- 이미 완성 또는 구축되어있는 문법 체계를 그냥 가져다가 사용
- 크리에이티브한 문법이 없이, 정해진 루트대로만 할 수가 있음
- 기존 SSR방식에서 업그레이드 된 SSR 방식
- Pre-Rendering = 사전 렌더링 방식을 사용

1) SEO 검색률이 매우 향상
2) FCP (first contentful paint)
3) Hydration (어떠한 상태가 실질적인 상태로 변화 되어지는 화학적 작용)
> 컴포넌트 마운트 => 사용자 액션
=> TTI (Time To interactive)시간이 매우 개선

Next.js의 축약 정의(장점) // 면접에서도 물어볼 가능성이 있다.
1. React의 framework: 거의 답이 정해져있다
2. SEO에 최적화
3. FCP > Pre-Rendering 기능
4. Hydration // TTI 개선

postgresql://postgres.euokzphhdoywlwluetoc:[YOUR-PASSWORD]@aws-0-ap-northeast-2.pooler.supabase.com:5432/postgres
// 저기 패스워드는 노드js홈페이지 들어가서 로그인후 settings - database 스크롤내려서 database password(까먹었을때) 비밀번호 입력하고 리셋누르면된다. 현재 비밀번호:wnsdud794684
이때 database setting - Connection string - 에 모듈을 트랜지션에서 섹션으로 바꿔서 카피해야한다.
이후 npx prisma db push 하면 노드js 홈페이지 테이블 에디터에 북과 리뷰라는 스키마가 나온다.
> npm run seed하면 북과 리뷰 스키마에 데이터가 넣어진다(새로고침)
> npm run build (이때까지 했던 것들을 빌드시킨다.)
>npm run start(실행)
>npx prisma studio
크롬주소에 localhost:12345 입력하면 주소나옴 
api클릭하면 여러가지 스키마들이 뜨는데 /book 이런식으로 안내하고있는데 이때  localhost:12345/book 이런식으로 주소에 입력하면
json데이터가 나온다. (12345는 코드상에 있다)
코드에서 npx prisma studio(가짜서버공간), npm run start 해서 두개의 서버를 열어야한다.(터미널 두개만드면된다.//터미널 분할)
이상태로 코드파일이 있는 곳에 코드 새로 열어서 npx create-next-app@14 ui-main(파일명)
질문이 나오면 y,y,n,y,n,n인데 상황에따라서 대답이 바뀐다.(ex:Tailwind CSS)
열때는 npm run dev 안에 pages폴더의 .도쿄먼트.tsx가 ui의 핵심요소가 될예정.
pages안에 파일명을[파일명].tsx >> 대괄호표기법으로 넣으면 주소의 파라미터값을 만든다는 의미. book/1,2,3등등등
>[...파일명].tsx 하면 파라미터안에 파라미터 book/1/2 등등 = catch all segment 기능
>[[...파일명]].tsx. : 파라미터값이 없을때도 사용하겠다. = optional catch all segment 기능 



1.Next.js 소개
comon page-
- page routerting



supabase: firebase처럼 cloude 공간 // 서버공간

schema : 서버를 구축> db를 어떤 방식으로 저장하고 출력할지

Next.js + TS + supbase + vecel & prisma (현 프론트엔드에서 가장 많이 사용되는 조합)


1.Page Routing

2.Navigation
- useRouter

3.pre-fetching
- index페이지로 사용자가 최초 접속
- 현재 사용자가 보고 있는 페이지에서 이동가능한 페이지들을 사전에 불러와서 대기해주는역할
- 수정사항 발생 => 실제처럼 테스트하려면, 반드시 배포직전 단계 실행

-useRouter를 활용해서 페이지 라우팅을 하는 경우 pre-fetching

4.api routes
-api > 파일명


SSR 방식(현재시점) > SCR방식
- Pre-Rendering 사용
- user // nlient // server
- 기존에는 user가 client를 통해서 server에 무언가를 요청하는 시점에 맞춰서 데이터를 생성해서 전달하는 방식 vs 1차 렌더링
1차렌더링=index.html + js
- client(2차 렌더링) : ui가 출력될 수 잇도록 하는 단계
- 최초에 브라우저에서 컴포넌트 마운트가 되기위한 이전 시간이 현저히 줄어들게 됨 = FCP타입 : first contentful painting
- fcp가 행동되기까지의 시간 = TTI(time to interactive)
data fetching 방법?
- 사전 렌더링을 하기 때문에, 사전 렌더링 시간 동안 먼저 fetching

*data fetching
1. SSR방식: 사전 렌더링 기간 동안 데이터를 페이칭 하는 방법
> 무조건 가장 최신 업데이트가 되어진 데이터를 서버로 부터 받아올 수 있음
> 만약 서버가 사전 렌더링을 해줘야하는 로우 데이터가 만약 무거운 경우에는 이자체 단계에서로딩시간을 잡아먹을 수 있다

2.SSG방식: 빌드 단계에서 최종적으로 정의된 데이터를 사전에 fetching하는 방법
(static site generation방식)
> 서버에서 사전 렌더링 시 무거운 데이터를 처리해야하는 부담을 빌드 단계에서 압축한 데이터만 가지고 처리

3. ISR방식: 사전 렌더링 + 빌드 합침 => 최초에서 페이지의 데이터 패칭 방법을 상황에 따라서 선택할 수 있음
(incremental Static regeneration)

react.js =>scr // 파일수정 변환 => server 상관관계
next.js =>server

cloud 방식으로 만들어진 server시영
supabase = 개인용 가상 cloud할당 > server구현


App router

 - 페이지 캐싱
> full router cache (풀 라이트 캐시)
> next.js 서버가 데이터를 사전 렌더링 하기 전 단계에서 데이터의 캐시값을 저장 및 정의 해놓은 기능
1) 정적인 페이지
> 최초에 책 12권 정보

2) 동적인 페이지(dymaic page)
> query / parameter + 데이터 캐시 저장x 
> query / parameter + 데이터 캐시 저장
query / parameter를 받지않음 + 데이터 캐시 저장x 

dynamicParams => 변수 및 속성
> 라우트 세그먼트 옵션
 - 어떤 특정 컴포넌트 페이지를 강제적으로 dynamic 혹은 statice 속성으로 변환하는 방법

>client router cache(클라이언트 라우터 캐시)
:브라우저에 저장이 되는 캐시
클라이언트 컴포넌트 페이지 역시 서버 컴포넌트 페이지처럼 유저가 특정 페이지에 접속하게 되면 브라우저에 캐시값을 저장해놓아서 향후 동일한 페이지를 방문하고자 했을 때 효율적이고 빠르게 접속할 수 잇도록 도와주는 역할

error

reset(): 클라이언트 컴포넌트 페이지에서만 작동
- 에러가 발생
- 서버를 정상작동()클라이언트 컴포넌트 페이지 정상작동x

Next.js > server action 기능
> 클라이언트 페이지에서 서버에서만 실행되는 비동기 함수를 호출해서 사용

< 주의 > 
1. 원래 전통적인 error 핸들링 방법 > 함수를 실행 = try // catch

2. react ~ next => 컴포넌트 기반 모든 페이지 구성
- 컴포넌트가 많아지면 많아질수록 에러가 발생될 수 있는 기회요소 // 에러를 핸들링하기 위해서는 catch

3. next > error를 한번에 핸들링할 수 있는 컴포넌트 페이지 > 특정 폴더 페이지 삽입
- page.tsx > try // catch
- error.tsx

reset() : 서버에서 정상적으로 데이터를 제공해주지 못했을 때 발생한 에러문제를 해결하지 못했다
window.location.reload():현재 보고있는 페이지 전체를 진행



 
