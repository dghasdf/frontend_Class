1.react:
2.virtual dom

3.component

4.props

5.jsx

6.hooks
- useState() : state 변수 값 관리 제어
- useRef() : VD에서 특정 Node 요소를 찾아서 제어
- useEffect() : 리액트 컴포넌트의 라이프 사이클 = "생애주기" 제어
>탄생(컴포넌트) > 성장(업데이트) > 죽음(더이상 컴포넌트 x) 
useEffect 기능
1.기본기능 : 의존성 배열에 입력된 state의 값의 업데이트가 되면 콜백함수를 실행시킨다. ex) 넥플릭스 사이트를 만들었는데, 최조에는 api 데이터를 굳이 가져올 필요가 없는 상황 => 영화 썸네일을 클릭할 때에만 모달페이지를 만들면서 동시에 영화api데이터를 찾아와야하는 상황

2.컴포넌트가 실행되자마자 무조건 실행기능
ex)넥플릭스 사이트를 만들었는데, 상단 슬라이드 => api 데이터를 활용해서 무조건 생성상황
>useEffect에 의존성 배열이 존재하지않는 경우, 컴포넌트 안에 있는 값을 렌더링 할 때마다 무조건 콜백함수를 실행시킨다

3.컴포넌트 안에 있는 요소들을 렌더링할 때만 실행, 최초에 컴포넌트가 마운트되는 시점
>비동기처리 방식으로 a데이터 먼저 실행 => b데이터 나중에실행

4.컴포넌트가 마운트 되는 시점에 딱 1번만 실행
>useEffeck()

5.컴포넌트가 언마운트 되는 경우
기존에 컴포넌트가 마운트 된 이후에 시랭하고 있던 어떤 작업이 종료가 되었다는 것을 의미

>자연스럽게 언마운트의 단계 // 의도적으로 언마운트의 단계
>기존 작업을 종료시키는 명칭 클린업

>리액트에서는 컴포넌트의 생애주기
1) 브라우저가 컴포넌트 파싱하는 순간:마운트
2)UI 내 state상태변화가 업데이트:렌더링
3.컴포넌트가 언마운트가 되려면:클린업
4.더이상 컴포넌트를 사요하지 않는 순간:마운트

단락회로평가 => jsx문업 : "문장"x // "식"=>
AND 단락평가 => 좌항이 참인경우에만 우항을 실행

Header Component = 오늘이 며칠인지 알려주는 혁할
editor = 사용자가 오늘 해야할일을 입력할 수 잇도록 도와주는ㅕ=여ㅕㅕㅕ

7. state 
state > useState
>state를 관리하는 요소 > 최상위부모
1)버튼을 클릭하게 된다면, 해당 버튼에 입력된 값을 찾아온다.
2)찾아온 해당값을 현재 카운터 영억으로 출력해준다

리액트 > 코드를 작성

리액트 공부방법
1. 각각의 개념 정의 확실하게
2. 큰요소들 => 리액트 작동되는 원래


useState():
- 컴포넌트를 만들면 거의 대부분의 확률로 무조건 state값을 관리해야하는 상황 발생
- 사용자의 이벤트가 거의 대부분 발생
가상돔을 사용하기에 일반 변수를 사용하지 않고 state관리

useRef()
- 특정 노드를 제어하고자 할때, 컴포넌트 그자체를 제어함
useEffect():
-컴포넌트가 어떤 단계 및 상황에 도착했을때에 무언가를 실행시켜야할때