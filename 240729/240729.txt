오라클로인한 라이브 서버 작동문제

= 단축기: 윈도우 + r :실행창  - service.msc(로컬 컴퓨터 설치된 모든 운영 프로그램 목록)

자바들어가기 전.


html = 구조 // 뼈대

css: 스타일 정의
css에서 동적인 구현 =  transition / transform / animation

js: 동적인 페이지를 구현하기 위한 목적. 

= DOM

2.자바스크립트?
자바랑 다르다.

3.자바스크립트를 한문장으로 표현해보자면
=객체지향 프로그로그래밍 언어

알고리즘 & 자료구조 토대로 무언가를 생성.
만들어낼 수있어야 진정한 언어
라이브러리 // 프레임워크

4.객체지향 : 어떤 정보 및 데이터를 효율적으로 관리하기 위해서 만들어놓은 저장공간

html 문서 = 웹 브라우저
1.-fetching 단계
=html 문서를 웹브라우저가 전달 받아서 본인이 읽을 수 있는 형태로 변환시키는 작업

2.parsing 단계
=html 문서를 웹브라우저가 실제 읽어나가는 단계, 반드시 위에서 아래로(먼저 작성한 문서를 먼저읽고,
나중에 작성한 문서를 가장 나중에)
= position absolute가 예시.
= script 태그를 만나는순간 멈추고 sctip로 진행.
=동적인 페이지 개발을 위해 스크립트를 사용.

1)body 태그에 scrip태그 사용하기?
=내부 스크립트(맨밑에 스크립트 태그를 넣어버리면 위에서부터 아래로 읽기에 문서 자체가 길면
찰나의 순간 동적이지않는 페이지가 나옴)

2)script태그 속성 : async // defer 

async: 비동기 처리
 = 동시에 여러가지 작업을 수행한다.
현재 주어진 문제를 해결하면서, 동시에 다른 기타 요소들을 해결할 수 있는 방식
=

sync: 동기 처리
 = 먼저 실행되고 있는 어떤 문제를 다 처리해야지만, 그다음 문제를 처리할 수 있는 방식

defer: 병렬방식으로 html &script를 읽고, 둘 중에 하나가 먼저 종료가 되더라도 일단 기다리고 html, script 모두
다읽게 되면 그때 fetching

3.executing 단계
= 실제 웹브라우저가 읽어내려온 문서를 웹 브라우저 출력을 실행시키는 단계 



1.변수
- 데이터를 담는 바구니
- 연산작업 document // window값
- 3개의 키워드를 활용해서 변수 선언
>var(가급적이면 사용 안하는게 좋다.
=유일한 장점 호이스팅이 가능하다.
=hoisting = 끌어올리다.

>let(const 다음으로 차선으로 고려): 재선언은 안되지만 재할당은 가능함.

>const (최우선적으로 고려하면 좋은 변수) = 변하지않은 고정값에만 사용. = 상수값
-단점 = 재선언과 재할당이 불가능하다. 

-선언 = 변수생성
-값을 할당
//변수명을 선언시 유의사항
//예약어 사용불가,
//document // window... =>예약어
// $, _, 영문자 => 변수명 첫단어 가능
// 단 변수명 중간, 끝에 숫자 가능.
// 변수명은 반드시 대,소문자 구분함.

//3가지 방식 중 1개
// 1)카멜표기법
//2)스네이크 표기법
//3)헝가리안표기법 = 단어 대문자

//const numberSum = 3; = 카멜
//const number_sum = 10; = 스네이크


2. 자료형

1)원시타입: 숫자,문자, 논리, 심볼, null, un
2)참조타입:객체,배열,함수

=>전개연산자

= 현재 변수 안에 할당 된 값의 자료형태를 확인할 수 있도록 해주는 함수 = typeof()
-숫자형 = 사칙연산가능 = 숫자!!!=number
-문자열 = 말 그대로 문자 => string =>"" // ' '// ` ` 
= 형변환 조심하기.
-논리형 = 참과 거짓 값 => boolean> true||false

-기타형 null // undefined = >유효하지않은 값과 미정의 값
=> 템플릿 리터럴 문법
변수안에 담긴 값 + 문자열 섞어서

-객체: 단일값이 아닌, 복합적인 데이터 자료를 저장 또는 보관

-배열: 해당 자료형태 안에 있는 모든 자식 요소들에게 번호를 매길 수 있음 => 해당 번호에 할당된 값만 찾아올 수도 있고, 그번호에 특정 값을 교체해서 넣을 수 있다. > 자식요소들이 각각의 번호를 가지고 있기 때문에 배열안에 담겨있는 총 자식들의 개수도 파악 1=> 0, 2=> 1, 3=>2
index 값 = 자식요소들의 순서번호 반드시 0에서 부터 시작
length 값: 해당 배열안에 담겨있는 총 자식의 개수
=> 무조건 해당 배열의 마지막 자식요소 아이템의 index 값은 배열의 전체 총 자녀 개수에서 -1을 한값과 무조건 동일
-객체> - 배열 - 함수 = 배열과 함수는 객체의 자식요소

-심벌: 유일무이한 값을 생성 및 보관 관리

함수:funtion // arrow

직접 변수영역에 값을 할당하는 경우, 값이 어느 범위까지 변경될지 아무도 예측불가

컴퓨터 cpu : 메모리 공간 제어
변수 // 색상 // => 메모리 생성
메모리의 가장 최소단위 비트
비트0,1만 표현
바이트 = 8개의 비트가 모여야 1바이트
2의8승 = 256개 - 0~255
숫자 무조건  64비트 8바이트
변수 500개 선언하려면 4000바이트 필요.

형변환
문자+숫자 => 연산, 무조건결과 문자

1)의도적으로 숫자의 형태로 변환
number(): 숫자가 아닌 값도 숫자로 바꿈
parselnt(): 인자값으로 들어온 숫자 정수값으로
parsefloat(): 인자값으로 들어온 숫자를 실수값으로 표현 = >소수점을 가지고 있는숫자로 만듦

2)의도적으로 문자의 형태로 변환
string() : 모든 값을 싹다 문자열로 바꿈
toString() : null,undefined

3) 의도적으로 논리값으로 형태를 변환
boolean():모든 값을 논리값으로 바꿈
-존재하는 값은 거의 대부분 true
-undefined // null / 0

1.변수

2.자료형

3.연산자
사칙연산
% = 나눈 후 나머지 값을 찾아옴
++, -- : 증감연산자
> 증감연산자를 사용하는 위치에 따라서 결과값이 완전히 달라진다
증감 연산자가 피연산자 앞에 입력되면 연산작업을 먼저 실행
증감연사자가 피연산자 뒤에 입력되면 연산작업을 나중에

복합대입연산자 => 할당연산자

비교연산자
-느슨한 연산자 
-엄격한 연산자
-부정연산자 => !

논리연산자 (참 or 거짓)

&& : and 연산자(좌항과 우항 모두 참이여야 결과값이 참)
-|| or연산자 (좌항 우항 둘중하나라도 참이면 true)

3.조건문
a일때 무언가 그런데 그게 아니면 무언가
if문(단독으로 여러번 사용가능)
if else(반드시 조건식 true여야지만 실행 그렇지 않은 경우 else실행)
else if문(복수의 조건식을 따지고자 할 때!)
삼항조건 연산자 ? :
switch문
-선택할 수 있는 조건들이 다양한 경우
switch() / case / break / default

4.반복문
-기본 for문
-foreach문
-for...in문
for---of문

while문
do while문 = ~을해라.


-break문
강제종료의 의미를 가지고 있음

-continue문
건너뛰기의 의미를 가지고 있음

>iterable한 자료형만 사용할 수 있음
>반복시킬 수 있는 자료형
>iterable한 속성 > inerator 객체 만의 전유물
>객체,배열
>set()
>css:애니메이션 : 반복할 수 있는 iteration

callback: 클로져 = >기능적인 의미를 내포하고 있는 명칭

function(일반함수)

arrow funtion(화살표함수 =>) : 하드웨어적인 의미를 내포하고 있는 명칭

프로그래밍 언어
실행문 // 표현식문 =>다중패러다임언어
결과값 실행 => 메모리공간

5.함수
프로그래밍 영역의 중요한 요소
함수? => 계산기 : 개발자의상황 & 문제해결에 맞춰서 생성해낼 수 있는 나만의 커스텀 계산기의 역할
< 무한 슬라이드를 실행 하게 될 시 >
1)사용자가 슬라이드를 실행시킬 수 있는 버튼 클릭
2)그렇다면 그 버튼 찾아온다.
3)그 버튼에 이벤트를 부여한다.
4)그 이벤트라는 것은 각각의 슬라이드 이미지에 숫자를 부여하고 버튼을 클릭할 때마다 그 숫자가 증가하도록
만든다.
5)그런데 그 숫자가 슬라이드 개수만큼 증가한다면, 다시 최초 슬라이드 이미지의 번호를 변환한시킨다.
6)그리고 위에 작동을 계속 무한 실행시킨다.

1.일반 funtion
2.익명함수
3.화살표함수
4.매개변수 & 인자값 개념
매개변수 기본값으로 지정한다
매개변수는 설정 & 인자값을 받아오지 못햇을 경우
- 미리 매개변수 안에 값을 설정 => 실제 인자값으로 값을 받아오지 못했어도 함수 실행에 에러를 
발생시키지않음
5.return: a함수의 결과값을 b라는 함수 혹은 외부에서 찾아서 사용할 수 있도록 해주는 명령어!

선언형 // 명령형

프로그래밍 코드 작성 // 실행
객체지향 // 절차지향

js 진영 2가지 모듈!!!
> 모듈 = 레고 "블럭"
>comin js모듈 : Node
>ESM 모듈 : 공식모듈

cs 기본개념
1)Variable
2) Scope = 범위
전역 => Global : 1번만 작성해놓으면 언제 어디서든 가져다가 사용가능
wldur => Local : 특정 범위 안에서 설정, 그 범위 안에서만 사용 가능.

Block // 특정 제어문의 조건식 안에서 설정된 변수들은 block 범위에서만 움직임

script // 전역변수처럼 행동 let ,const
  