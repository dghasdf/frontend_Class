movieeql을 열때는 241018 server를 같이 열어야한다.




type script

타입스크립트는 기존 js언어 문법을 그대로 흡수 & 수용 +@
차이점은? type을 사전에 지정하는 기능을 더한 것 
c언어 & java B/E 
- 변수 선언 => 값(사전에 변수 타입)
- 변수 = 숫자 // 문자
-google chrome 브라우저 탑재 v8검색엔진
-v8 => node.js // 브라우저가 아닌 환경에서도 js를 사용할 수 있음
- js => server

모든 프로그래밍 언어는 타입 시스템을 가지고 있음
- c, java: 정적 타입 시스템(코드를 실행하기 전에 모든 변수의 타입 고정적 선 결정 => 값 할당)

ts: 점진적 타입 시스템 (변수안에 값을 넣으면, 자동으로 값을 추론 // 변수의 타입을 바로 고정

js: 동적 타입 시스템 (코드를 실행하고 나서 해당 변수안에 담긴 값을 유추해서 변수 타입을 결정)

웹 브라우저가 인식할 수 있는 언어 3가지
html / css / js

ts의 컴파일링 작동 프로세스
1) js(인간 친화적인 언어) => 브라우저 (ast구조) => 바이트 코드(실행)

2ts(인간 친화적인 언어)  => 1차 ast구조(기계 친화적인 언어) => 타입검사 성공 => js(컴파일링) => 2차 ast 구조(기계 친화적인 언어) =>바이트코드(실행)

수동적으로 세팅
빌드도구 세팅

1. npm init -y
2. npm i @types/node

3. npm i typescript -g(구버전)
- npm i tsx -g
-tsx -v
-tsx src/index.ts

tsc src/index.ts
node src/index/js

npm i ts-node -g
npm i ts-node


ts-node src/index.ts

4.tsc --init: 타입스크립트 컴파일러 옵션 설정

------------------------------------------

Module : 복수의 자바스크립트 파일을 각 기능에 따라서 개별적으로 생성해놓고, 상황에 따라서 가져다가 사용하기 위해서 만든 시스템

node.js => 자체적으로 모듈 시스템 버전 생성.선언 사용 => CommonJS  
-------------------------------------------------------------------------------
여기까지는 js => TS 컴파일링 & Node 실행
=> 오류사항: 모듈x => ts가 없다
이때 해결점: TS컴파일링 환경설정 세팅을 해줘야함
tsc --init

tsc src/index

ts-node 대응 중지 => 18버전사용해야함
>tsx => 권장하고있다(컴파일링 => 출력은하지않고 바로 실행된다)

타입스크립트는 기본적으로 각각의 파일들을 전역요소로 인식한다.
타입스크립트 계층구조
상대적으로 상위랭크되어있는 타입: 슈퍼타입
상대적으로 하위랭크되어있는 타입: 서브타입
>슈퍼타입으로 갈수록 수용할 수 있는 타입의 개수 많아짐
>서브타입으로 갈수록 수용할 수 있는 타입의 개수 한정적



