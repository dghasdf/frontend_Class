자바에서 this.classlist 사용할ㄸ는 펑션을 사용해야함
ex)
const trigger = document.querySelector(".trigger");
trigger.addEventListener("click", function () {
  const gnb = document.querySelector(".gnb");
  this.classList.toggle("active");
  gnb.classList.toggle("active");
});

변수를 생성한다는 것은 => 컴퓨터 cpu 가상 메모리 공간 사용을 한다는 의미이다.

bootstap =>프레임워크
=>html,css =>레이아웃구조
=>절대로html,css.js로 포폴x

react.js + booststap

jquery / slick slider => 라이브러리
=>공통적으로 사용하는 웹 표준 문법을 기반으로 그위에 각자의 라이브러리의 고유한 특성을 가지고 있는 문법을 더할 뿐이다.
=>React.js


bootstrap => 프레임워크
=>천지창조 // 완전한 독자적인 문법 체계 및 질서
vue.js // angluar.js

12개의 컬럼으로 나눈다.
> 10과 가까운 숫자가운데서 최대공약수가 가장 많은 숫자

grid는 flex와 정말 중요하게 많이 사용되는 레이아웃 시스템 중 하나이다.

실제에선느 grid보다는 flex의 사용빈도가 더 높음.

이유는 grid는 명확하게 행, 열이 정해진 상황에서만 사용가능하다 => 행 열에 대한 정렬이 완전 깨지기때문.

flex의 경우, 부모요소 d:f적용하는 순간 =>자식 요소

display: grid
gird-temolate-colums: 열을 몇개
grid-template-row: 행을 몇 개
>grid: 행 몇개 / 열 몇 개

grid-row-gap: 행 사이의 간격
grid-columm-gap:열 사이의 간격
> grid-gap: 행 간격 열 간격

justify-items: 이미 여러개 열을 나눠진 각 자식 요소의 아이템들의 수평 정렬 세팅
>start / center / end / stretch

align-items 이미 여러개 열을 나눠진 각 자식 요소의 아이템들의 수직 정렬 세팅
>start / center / end / stretch

justify-content 이미 여러개 열로 나눠진 각 자식 요소를 하나의 컨텐츠로 인식
>start / center / end /
> space-between
> space-around


1fr / auto
=>평소에는 거의 동일한 개념으로 사용된다.
=> column / row를 나누고자 할 때 1/n

각각의 개별 아이템을 하나로 묶어서 content로 사용하고 할때 차이점
auto의 겨우, 개별 아이템에서 원래 적용되어 있던 너비값을 식별해서 사용
1fr의 경우, 개별 아이템의 너비보다 부모요소의 전체 너비 중 1/n값을 우선적용

align-content:각 개별 아이템들을 하나의 content로 식별해서 수직 정렬을 주고 할 때 사용한다.
(start / center / end)사용가능

justify-self:부모가 아닌 자식요소에 적용할 수 있는 grid문법 => 부모요소의 정렬보다 우선적인 적용
start / center / end

그리드 레이아웃 시스템 정렬기준:라인 카운터
> 자식요소 - 라인카운터

열을 기준으로 병합을 하고자할 때, 
          grid-column-start: 1; = 열이 시작될 라인넘버부터 진행
          grid-column: end =열이 끝날 무렵의 라인 넘버
>grid-column: 시작 라인 넘버/종료 라인 넘버
gird-column 시작 라인 넘버/span 공간 수
