현재 남은 것 

> 정규표현식(regular-expreession)
= 사용자로부터 form 요소를 활용해서 어떤 값을 전달받는 경우, 특정 패턴을 설정해놓고 해당 패턴의 true // false 구분 및 분류 => 유효성검사 혹은 예외조항처리의 효율적

2) 패턴

3)정규표현식은 패턴 & 플래그 
패턴 => 공통적인 규칙
플래그 => 옵션

4)정규표현식을 생성하는 방법 2가지
- 직접적으로 패턴을 정의하는 방식
- new 예약어 프로토타입 객체 => 정규표현식
- new RegExp() => 정규표현식의 약자
> 데이터통신
> 애니메이션

5)정규표현식 전용 메소드

1)정규표현식.test(문자열) : 정의해놓은 정규표현식 패턴을 정확하게 따르고 있는지 확인하기 위한 메소드
 => false // true

2)정규표현식.exec(문자열) : 정규표현식에 매칭되는 문자열이 있으면 해당 결과값을 배열의 자료형태로 반환
<->null 반환

3)문자열.match(정규표현식) : 해당 문자열 내 정규표현식에 일치하는 값을 찾아줄 때 사용

4) 문자열.replace(정규표현식,바꿀문자열) : 해당 문자열에서 정규표현식에 매칭되는 문자열을 찾아서 바꿀문자열로 교체

6)정규표현식에서 자주사용되는 플래그 타입
-i(international) : 문자열 내 영문자를 찾아오거나 검사할 때, 대/소문자를 구별하지않고 검색
-g(global) : 입력된 문자열 전역을 검색 // if, g라는 플래그가 입력되지 않는다면, 무조건 설정 패턴을 첫번째로 검색되는 문자열만 찾아줌

7)정규표현식에서는 문자열 내에서는 특정부분이 숫자의 기원, 문자의 기원인지를 구분할 수 있는 방법을 제시 =>문자 클래스

(문자 클래스종류)
-숫자 클래스(digit class)
>패턴을 정의할 때, \d 0~9까지의 숫자를 찾아올 때
>패터을 정의할때 \D : 숫자가 아닌 모든 문자를 찾아오고자할때 

-공백 클래스(space class)
>패턴을 정의할 때, \s : 문자열 가운데 공백 혹은 줄바꿈 등의 여백요소를 찾아오고할 때
>패턴 정의할 때 \S: 문자열 가운데 공백이 아닌 모든 문자를 가지고할때  


-단어 클래스(word class)
>패턴을 정의할 때, \w : 문자열에 포함되는 숫자, 언더바, 대쉬 등 찾아오고자할 때
>패턴을 정의할 때 \W : 문자열에 포함되지 않은, 숫자,언더바, 대쉬 등 찾아오고자 할때

8)정규표현식에서는 시작, 끝, 체크하기 위한 목적으로 탄생한 기호
> ^(캐럿) =>문자열의 시작을 의미
>1)특정범위를 지정하는 []안에서 사용되는 경우에는 기존캐럿의 기능 변경 반대의 의미이다.
> & =  문자열이 긑을 의미

9)정규표현식(반복패턴)
>[문자열]:특정범위를 지정하고자 할 때
> {문자열} : 반복패턴 횟수를 지정하고자 할 때
> 문자열+:해당 문자열이 한번 이상 반복되는 경우
> 문자열? : 해당 문자열이 1번 있는 경우만 찾아옴(해당 문자열을 한번도 사용하지 않은 경우에도 true)
> 문자열* : 해당 문자열 횟수에 관계없이 1번이상 반복되는 경우(해당 문자열이 특정 반복되지 않고 있는 경우에도 찾아옴)
>. :어떤 문자열인지 지칭하지 않은 상태에서 그냥 문자라는 것이 존재하는지 여부 검색
ex) [x,y]라는 패턴 =>xay도 찾아주고 xzy도 찾아줌 

10)정규표현식(or검색)
>버티컬 바 > 반드시 1개만 사용 // 절대 띄어쓰기(*빈문자열x)