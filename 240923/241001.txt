updateDoc(): 컨텐츠를 업데이트 시켜주는 함수

getDownloadURL():STORAGE 경로에 있는 파일의 URL을 추출해주는 함수

StorageError : 만약 firebase storage 안에서 에러가 발생했을 때, 에러 전체에 대한 정보값을 가지고 있는 객체

storageErrorcode: firebase storage 안에서 에러가 발생했을 때 특정 에러상황에 맞는 코드를 확인하고자할때 사용

uploadBytes: 파일을 수정 후 업로드 했을 때, 즉시 반영될 수 있도록 해주는 함수 
uploadBytesResumble: firebase storage에 업로드된 컨텐츠의 bytes 정보를 받아올 수 있도록 해주는 함수

바닐라 자바스크립트기반으로 + vite 빌드도구를 사용하지 않았을 때에 배포법

npm run bulid: 지금까지 작업했던 결과물들을 배포용 파일 압축 및 정리하는 작업

기본적으로 build 폴더 생성
firebase init => dist / distribute

현 데이터 빌드모드: mpn run build
최종적으로 배포 : friebase deploy











import { useRef, useEffect, useState } from "react";
import {
  delay,
  motion,
  useMotionValue,
  useTransform,
  useScroll,
  AnimatePresence,
} from "framer-motion";
import reset from "styled-reset";

const StoryListMain = styled(motion.div)`
  width: 1000px;
  height: 80px;
  display: flex;
  justify-content: space-between;
  margin: 30px 0 70px 0;
  gap: 20px;
  text-align: center;
`;

const StoryTest = styled.div``;

const Story = styled.div`
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: #eee;
  border: 2px solid #ffe900;
  margin-bottom: 10px;
  cursor: pointer;
`;

const boxArray = ["1", "2", "3", "4", "5", "6", "7", "8"];

const Box = styled(motion.div)`
  width: 200px;
  height: 200px;
  background: rgba(255, 255, 255, 1);
  border-radius: 40px;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 380px;
`;

const Buttons = styled.div`
  position: absolute;
  bottom: 300px;
  display: flex;
  gap: 20px;
`;

const Button = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 10px;
  cursor: pointer;
`;

const box = {
  initial: (back: boolean) => ({
    x: back ? 500 : 500,
    opacity: 0,
    scale: 0,
  }),
  visible: {
    x: 0,
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.5,
    },
  },
  exits: (back: boolean) => ({
    x: back ? 500 : -500,
    opacity: 0,
    scale: 0,
    transition: {
      duration: 0.5,
    },
  }),
};

function StoryMain() {
  const [visible, setVisible] = useState(1);
  const [back, setBack] = useState(false);
  const prevPlease = () => {
    setBack(true);
    setVisible((prev) => (prev === 1 ? 8 : prev - 1));
  };
  const nextPlease = () => {
    setBack(false);
    setVisible((prev) => (prev === 8 ? 1 : prev + 1));
  };
  return (
    <StoryListMain>
      <AnimatePresence mode="wait" custom={back}>
        <StoryTest>
          <Story />
          <p>김준영</p>
        </StoryTest>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
        <div_Storytext>
          <Story />
          <p>김준영</p>
        </div_Storytext>
      </AnimatePresence>
    </StoryListMain>
  );
}

export default StoryMain;
