자료구조 & 알고리즘
> 자료구조: 자료를 어떻게 구조화 할 것인가? 정으
> 수료 자료구조 > 변수를 사용 // 배열을 사용

알고리즘
> 알고리즘 정의: 어떤 문제를 해결하기위한 방법/솔루션

* 알고리즘은 왜 반복문과 같이?
> 어떤 자료구조를 선택하는가에 따라서 무조건 이에 따른 알고리즘 // 반드시 변경 채택될 수 밖에없다.

코드의 효율성 체크 방법: 시간복잡도 개념 적용
시간복잡도 : 어떤 특정 알고리즘을 활용해서 문제를 해결하는데 걸리는 시간
어떻게 계산?
O(3n2+n) = O(n2)
> 가장 시간을 많이 잡아먹는 비효율적인 부분만 직접 비교

"반복문"
반복문 언제쓰나? > 이터러블한 객체 사용시 > 즉, 배열

< 정리 >
1.자료구조

2.알고리즘

3.시간복잡도 
- 빅오메가(어떤문제를 해결하기 위한 알고리즘을 적용했을 때, 최고의 효율이 나는 경우에 한정 시간 측정)
- 빅세타 (평균 시간 측정)
- 빅오 (최악)
다만, 빅오의 개념을 항상 적용한다 => 외부의 물리적 변수에 최대한 영향 빋지 않은 환경에서 측정하기에

3.1 빅오의 시간 복잡도 개념을 적용할 대 대 원칙
- 연산처리의 세부적인 요소는 중요하지않음
- 기장 시간을 많이 소비하는 요소를 기준으로 시간복잡도를 측정 //반복문
-이터러블한 객체는 배열

연결리스트와 배열비교
- 배열: 참조타입 변수, 배열에 들어오는 첫번째 인덱스값만 찾으면 나머지 값들은 신속 정혹하게 만들 수 있는 장점

-연결리스트: 메모리 공간에 산발적으로 흩어져 있는 데이터를 모아서 연결해놓은 자료구조, 데이터의 편집 수정이 매우 효율적 // 연결리스트의 경우에는 산발적으로 흩어져있는 데이터이기 때문에 배열보다 초기 로딩 속도가 늦다

연결리스트에서 자주 사용하는 기능 구현
- 추상자료형
-printall()
-indexAt()
-clear()
-insertLast()
-deleteAt()
-getNodeAt()

4.반복문 // 배열

5.배열 vs 
- 장점과 단점
장점 : 값의 대한 타입 // 사이즈 / 참조타입
단점 :  최조 배열 정의 // 수정 편집 매우 비효율적인 작업이 된다

6.연결리스트
- 장점 : head // next
- 단점 : 최초 값을 찾아오는 것과 무관 // 초기 로딩 속도가 좋지 않음
- 추상자료형 형식의 기능을 함수 7개

stack 연결리스트 내 자료구조
stack

stack형태의 추상자료형 함수 구현(?)
> 무언가를 쌓아올리다.
- 특징: 입구 출구가 동일한 특징
- 스택구조 프로그램: 포토샵, 피그마

연결리스트의 스택 추상자료형 함수 기능 4개를 구현

- push() : 연결리스트에 데이터를 삽입
- poo() :  연결리스트에 데이터 제거
- peek() : 연결리스트에 데이터 참조
- isEmpty() : 해당 연결리스트가 비어있는지 여부를 체크

7.Queue 연결리스트 내 자료구조 형태
- queue: 대기하다 or 기다린다
- 입구와 출구가 각각 독립적으로 있다
- enqueue() :데이터를 삽입
- dequeu() : 데이터를 제거
- front(): 데이터 참조
- isEmpty() : 자료가 비어있는지 여부확인

8.Deque 연결리스 내 자료구조 형태
- queue와 형태는 동일 + 자료 생성 & 삭제
- printAll() : 모든 데이터를 출력
- addFirst() : head에 데이터를 제거
- removeFirst() : headt에 데이터를 제거
- addLast() : tail에 데이터를 삽입
- removeLast() : tail에서 데이터를 제거
- isEmpty(): 데이터가 비어있는지 여부 체크

9.hashtable 연결리스트 내 자료구조 형태
-hash: # => key
-table: 비효율적인 자료구조를 보다 효율적으로 관리하기 위한 목적으로 테이블의 형식을 참조하여 자료구조를 세팅하는 방법
-hash Function: "해시함수" 메모리 공간에 비효율적으로 자리 잡고 있는 데이터를 효율적으로 보관, 관리해주는 기능

결론
자료구조: 자료(데이터)를 어떤 구조로 저장하고 관리할 것인지 정의하는 것


알고리즘: 선택 혹은 정의한 자료구조를 기반으로 어떤 문제를 해결하기 위한 솔루션 혹은 방법

효율과 비효율에서 재귀가 언급된다.
재귀 : 어떤 문제를 해결할 때까지 본인 자기 자신을 참조해 나가는 것을 의미
requestAnimationFrame()
> 마우스 이동 이벤트

재귀함수는 효율성
> 유의사하이 break가 없으면 무한루프
> 기저조건= 무한루프에서 벗어나는 방법

> 재귀함수 그자체로 기능 => 메모리를 비효율적으로 소모
factorial 함수// 5! =5x4x3x2x1

재귀함수의 큰 문제점 => 하노이 탑

10. bubble sort (버블정렬) : 특정 배열안에 앞에있는 값과 뒤에 있는 값을 연이어ㅓㅅ 비교해서 최종적으로 배열 내 값을 정렬하는 것
select sort (선택정렬) : 특정 배열안에서 순차적으로 값을 선택해서 배열의 모든 값들과 비교후 최종적으로 배열 내 값을 정렬하는 것